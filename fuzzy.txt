#include <windows.h>
#include <GL/glut.h>
#include <stdlib.h>
#include <iostream>
#include <vector>
#define SCREEN_HEIGHT 480
#define SCREEN_WIDTH 640
using namespace std;

vector<pair<float, float> > rectPoints;
vector<pair<float, float> > polyPoints;
vector<pair<float, float> > result;
int rectCount = 0;
int polyCount = 0;
float xwMin, xwMax, ywMin, ywMax;

void init(){
    glClearColor(0, 0, 0, 1);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0, 640, 0, 480);
}

static void display(void){
    glClear(GL_COLOR_BUFFER_BIT);
    glFlush();
}


void drawWindow(){
    glColor3f(1, 0, 0);
    glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);
    glBegin(GL_POLYGON);
        glVertex2f(rectPoints[rectCount-2].first, rectPoints[rectCount-2].second);
        glVertex2f(rectPoints[rectCount-1].first, rectPoints[rectCount-2].second);
        glVertex2f(rectPoints[rectCount-1].first, rectPoints[rectCount-1].second);
        glVertex2f(rectPoints[rectCount-2].first, rectPoints[rectCount-1].second);
    glEnd();
    glFlush();
}

void drawPolygon(vector<pair<float, float> > points){
    glColor3f(1, 1, 1);
    glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);
    glBegin(GL_POLYGON);
        for(int i=0; i<points.size(); i++){
            glVertex2f(points[i].first, points[i].second);
        }
    glEnd();
    glFlush();
}

void clipPoints(float x1, float y1, float x2, float y2, int opt){
    switch(opt){
    case 1:
        cout << "Left : "<<endl;
        //IN-IN
        if(x1 >= xwMin && x2 >= xwMin){
            cout << "IN-IN" <<endl;
            cout << "x2 : " << x2 << " y2 : " << y2 << endl;
            result.push_back(make_pair(x2, y2));
        }else if(x1 >= xwMin && x2<xwMin ){//in-out
            cout << "IN-OUT" <<endl;
            float slope = (y2 - y1)/(x2 - x1);
            float intersect_x = xwMin;
            float intersect_y = y2 + (xwMin - x2) * slope;
            cout << "Intersect x : " << intersect_x << " Intersect y : " << intersect_y << endl;
            result.push_back(make_pair(intersect_x, intersect_y));
        }else if(x1 < xwMin && x2>=xwMin ){//out-in
            cout << "OUT-IN" <<endl;
            float slope = (y2 - y1)/(x2 - x1);
            float intersect_x = xwMin;
            float intersect_y = y2 + (xwMin - x2) * slope;
            cout << "Intersect x : " << intersect_x << " Intersect_y : " << intersect_y  << " x2 : " << x2 << " y2 : " << y2 << endl;
            result.push_back(make_pair(intersect_x, intersect_y));
            result.push_back(make_pair(x2, y2));
        }else{
            cout << "OUT - OUT" <<endl;
            cout << "{}"<< endl;
        }
        break;
    //Bottom
    case 2:
        cout << "Bottom : " << endl;
        float intersect_x, intersect_y;
        //IN-IN
        if(y1 >= ywMin && y2 >= ywMin){
            cout << "IN-IN" <<endl;
            cout << "x2 : " << x2 << " y2 : " << y2 << endl;
            result.push_back(make_pair(x2, y2));
        }else if(y1 >= ywMin && y2<ywMin ){//in-out
            cout << "IN-OUT" <<endl;
            float slope = (y2 - y1)/(x2 - x1);
            intersect_y = ywMin;
            if(x1 != x2){
                intersect_x = x2 + (ywMin - y2)/slope;
            }else{
                intersect_x = x2;
            }
            cout << "Intersect x : " << intersect_x << " Intersect y : " << intersect_y << endl;
            result.push_back(make_pair(intersect_x, intersect_y));
        }else if(y1 < ywMin && y2>=ywMin ){//out-in
            cout << "OUT-IN" <<endl;
            float slope = (y2 - y1)/(x2 - x1);
            intersect_y = ywMin;
            if(x1 != x2){
                intersect_x = x2 + (ywMin - y2)/slope;
            }else{
                intersect_x = x2;
            }
            cout << "Intersect x : " << intersect_x << " Intersect y : " << intersect_y  << " x2 : " << x2 << " y2 : " << y2 << endl;
            result.push_back(make_pair(intersect_x, intersect_y));
            result.push_back(make_pair(x2, y2));
        }else{
            cout << "OUT - OUT" <<endl;
            cout << "{}" << endl;
        }
        break;
    //Right
    case 3:
        cout << "Right :" << endl;
        //IN-IN
        if(x1 <= xwMax && x2 <= xwMax){
            cout << "IN-IN" <<endl;
            cout << "x2 : " << x2 << " y2 : " << y2 << endl;
            result.push_back(make_pair(x2, y2));
        }else if(x1 <= xwMax && x2>xwMax ){//in-out
            cout << "IN-OUT" <<endl;
            float slope = (y2 - y1)/(x2 - x1);
            float intersect_x = xwMax;
            float intersect_y = y2 + (xwMax - x2) * slope;
            cout << "Intersect x : " << intersect_x << " Intersect_y : " << intersect_y << endl;
            result.push_back(make_pair(intersect_x, intersect_y));
        }else if(x1 > xwMax && x2<=xwMax ){//out-in
            cout << "OUT-IN" <<endl;
            float slope = (y2 - y1)/(x2 - x1);
            float intersect_x = xwMax;
            float intersect_y = y2 + (xwMax - x2) * slope;
            cout << "Intersect x : " << intersect_x << " Intersect_y : " << intersect_y  << " x2 : " << x2 << " y2 : " << y2 << endl;
            result.push_back(make_pair(intersect_x, intersect_y));
            result.push_back(make_pair(x2, y2));
        }else{
            cout << "OUT - OUT" <<endl;
            cout << "{}" << endl;
        }
        break;
    //Top
    case 4:
        cout << "Top : " << endl;
        //IN-IN
        if(y1 <= ywMax && y2 <= ywMax){
            cout << "IN-IN" <<endl;
            cout << "x2 : " << x2 << " y2 : " << y2 << endl;
            result.push_back(make_pair(x2, y2));
        }else if(y1 <= ywMax && y2>ywMax ){//in-out
            cout << "IN-OUT" <<endl;
            float slope = (y2 - y1)/(x2 - x1);
            intersect_y = ywMax;
            if(x1 != x2){
                intersect_x = x2 + (ywMax - y2)/slope;
            }else{
                intersect_x = x2;
            }
            cout << "Intersect x : " << intersect_x << " Intersect_y : " << intersect_y << endl;
            result.push_back(make_pair(intersect_x, intersect_y));
        }else if(y1 > ywMax && y2<=ywMax ){//out-in
            cout << "OUT-IN" <<endl;
            float slope = (y2 - y1)/(x2 - x1);
            intersect_y = ywMax;
            if(x1 != x2){
                intersect_x = x2 + (ywMax - y2)/slope;
            }else{
                intersect_x = x2;
            }
            cout << "Intersect x : " << intersect_x << " Intersect_y : " << intersect_y  << " x2 : " << x2 << " y2 : " << y2 << endl;
            result.push_back(make_pair(intersect_x, intersect_y));
            result.push_back(make_pair(x2, y2));
        }else{
            cout << "OUT - OUT" <<endl;
            cout << "x1 : " << x1 << "y1 : " << y1 << "x2 : " << x2 << "y2 : " << y2 << endl;
        }
        break;
    }
}


void sutherlandHodgeman(){
    vector<pair<float, float> > dummy;
    //Left
    for(int i = 0; i<polyPoints.size()-1; i++){
        clipPoints(polyPoints[i].first, polyPoints[i].second, polyPoints[i+1].first, polyPoints[i+1].second, 1);
    }
    //Bottom - Right - Top
    for(int j=2; j<5; j++){
        dummy = result;
        dummy.push_back(make_pair(result[0].first, result[0].second));
        result.clear();
        for(int i = 0; i<dummy.size()-1; i++){
            clipPoints(dummy[i].first, dummy[i].second, dummy[i+1].first, dummy[i+1].second, j);
        }
    }
    dummy = result;
    for(int i=0; i<dummy.size(); i++){
        cout << "Result x:" << dummy[i].first << " Result y: " <<dummy[i].second <<endl;
    }
    glBegin(GL_POLYGON);
    glColor3f(0,1,0);
        for(int i=0; i<dummy.size(); i++){
            glVertex2f(dummy[i].first, dummy[i].second);
        }
    glEnd();
    glFlush();
}

void mouseHandling(int button, int state, int x, int y){
    if(button == GLUT_LEFT && state == GLUT_DOWN){
        y = SCREEN_HEIGHT-y;
        cout << "X coord : " << x << " Y coord : " << y<<endl;
        if(rectCount < 2){
            rectPoints.push_back(make_pair(x,y));
            rectCount+=1;
        }if(rectCount == 2){
            drawWindow();
            xwMax = max(rectPoints[rectCount-1].first, rectPoints[rectCount-2].first);
            xwMin = min(rectPoints[rectCount-1].first, rectPoints[rectCount-2].first);
            ywMax = max(rectPoints[rectCount-1].second, rectPoints[rectCount-2].second);
            ywMin = min(rectPoints[rectCount-1].second, rectPoints[rectCount-2].second);
            rectCount = 3;
        }else if(rectCount == 3){
            
            polyPoints.push_back(make_pair(x,y));
            polyCount += 1;
        }
    }
    if(button == GLUT_RIGHT_BUTTON && state == GLUT_DOWN){
        polyPoints.push_back(make_pair(polyPoints[0].first, polyPoints[0].second));
        drawPolygon(polyPoints);
        sutherlandHodgeman();
    }
}

int main(int argc, char *argv[])
{
    glutInit(&argc, argv);
    glutInitWindowSize(640,480);
    glutInitWindowPosition(10,10);
    glutInitDisplayMode(GLUT_RGB | GLUT_SINGLE);

    glutCreateWindow("Sutherland Hodgeman");

    glutDisplayFunc(display);
    init();
    glutMouseFunc(mouseHandling);

    glClearColor(0,0,0,1);

    glutMainLoop();

    return EXIT_SUCCESS;
}

//flood fill
#include <windows.h>
#include <bits/stdc++.h>
#include <iostream>
#include <GL/glut.h>

#define SCREEN_HT 480
#define bgRed 1.0
#define bgGreen 1.0
#define bgBlue 1.0

using namespace std;

vector<pair<double, double> > polygonCoords;
int polygonCoordCount = 0;

float fillCol[3] = {0.078,1.0,0.0};


void setPixel(int pointx, int pointy, float color[3])
{
    glBegin(GL_POINTS);
        glColor3f(color[0], color[1], color[2]);
        glVertex2f(pointx,pointy);
    glEnd();
    glFlush();
}

void getPixel(int x, int y, float pixels[3])
{
    glReadPixels(x,y,1.0,1.0,GL_RGB,GL_FLOAT,pixels);
}

void drawBoundingBox(int x1, int y1, int x2, int y2)
{
    glColor3f(0.0, 0.0, 0.0);
    glBegin(GL_LINE_LOOP);
        glVertex2i(x1, y1);
        glVertex2i(x1, y2);
        glVertex2i(x2, y2);
        glVertex2i(x2, y1);
    glEnd();
    glFlush();
}

void display()
{
    glClearColor(bgRed, bgGreen,bgBlue, 1.0);
    drawBoundingBox(150,250,200,300);
    glFlush();
}

void floodfill(int x,int y,float oldcolor[3],float newcolor[3])
{
    float color[3];
    getPixel(x, y, color);

    if(color[0]==oldcolor[0] && color[1]==oldcolor[1] && color[2]==oldcolor[2])
    {
        setPixel(x,y,newcolor);
        floodfill(x+1,y,oldcolor,newcolor);
        floodfill(x-1,y,oldcolor,newcolor);
        floodfill(x,y+1,oldcolor,newcolor);
        floodfill(x,y-1,oldcolor,newcolor);
        //floodfill(x+1, y+1, oldcolor, newcolor);
        //floodfill(x-1,y-1,oldcolor,newcolor);
        //floodfill(x+1,y-1,oldcolor,newcolor);
        //floodfill(x-1,y+1,oldcolor,newcolor);
     }
}

void plotPolygon()
{
    int i;
    glColor3f(1.0, 0.0, 0.0);
    glBegin(GL_LINE_LOOP);
        for(i=0; i<polygonCoordCount; i++)
            glVertex2f(polygonCoords[i].first, polygonCoords[i].second);
    glEnd();
    glFlush();
}

bool polygonPlotted = false;

void mouseHandler(int button, int state, int x, int y)
{
    y = SCREEN_HT - y;

    if(button==GLUT_LEFT && state == GLUT_DOWN)
    {
        if(!polygonPlotted)
        {
            glColor3f(1.0,0.0,0.0);
            glBegin(GL_POINTS);
                glVertex2f(x,y);
            glEnd();
            glFlush();

            polygonCoords.push_back(make_pair(x, y));
            polygonCoordCount += 1;
        }
        else
        {
            float interior_color[3];
            getPixel(x, y, interior_color);
            floodfill(x, y, interior_color, fillCol);
        }
    }

    else if(button==GLUT_RIGHT_BUTTON && state == GLUT_DOWN)
    {
        plotPolygon();
        polygonPlotted = true;
    }
}

void myInit()
{
    glClearColor(1,1,1,1);
    glClear(GL_COLOR_BUFFER_BIT);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0.0, 640.0, 0.0, 480.0);
}

int main(int argc, char** argv)
{
    glutInit(&argc,argv);
    glutInitDisplayMode (GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(640,480);
    glutInitWindowPosition(0,0);
    glutCreateWindow("Flood-Fill-Recursive");
    glutDisplayFunc(display);
    myInit();
    glutMouseFunc(mouseHandler);
    glutMainLoop();
    return 0;
}
//boundary fill
#include <windows.h>
#include<iostream>
#include<GL/glut.h>
#include<vector>

#define SCR_HT 480

using namespace std;

vector<int> X, Y;
float boundarycolor[] = {1, 0, 1};
float fillColor[] = {0, 1, 0};  // Green.
bool isFill = false;

void init()
{
    glClearColor(0, 0, 0, 1);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0, 640, 0, 480);
}

void display()
{
    glClear(GL_COLOR_BUFFER_BIT);
    glFlush();
}

// Function to implement Flood Fill Algorithm :
void floodFill(int x, int y)
{
    float currColor[3];
    glReadPixels(x, y, 1.0, 1.0, GL_RGB, GL_FLOAT, currColor);

    if( (currColor[0] != boundarycolor[0] || currColor[1] != boundarycolor[1] || currColor[2] != boundarycolor[2]) &&
       (currColor[0] != fillColor[0] || currColor[1] != fillColor[1] || currColor[2] != fillColor[2]))
    {
        // Changing the color of current pixel :
        glBegin(GL_POINTS);
            glColor3f(fillColor[0], fillColor[1], fillColor[2]);
            glVertex2f(x, y);
        glEnd();
        glFlush();

        floodFill(x + 1, y);
        floodFill(x - 1, y);
        floodFill(x, y + 1);
        floodFill(x, y - 1);
    }

    return;
}

void mouse(int button, int state, int x, int y)
{
    if(button == GLUT_LEFT_BUTTON && state == GLUT_DOWN)
    {
        // Add the points to the vector.
        if(isFill == false)
        {
            cout << "(" << x << ", " << y << ")" << endl;
            y = SCR_HT - y;
            X.push_back(x);
            Y.push_back(y);

            // Plotting the clicked point :
            glBegin(GL_POINTS);
                glColor3f(boundarycolor[0], boundarycolor[1], boundarycolor[2]);
                glVertex2f(x, y);
            glEnd();
            glFlush();
        }

        // Fill the polygon
        else
        {
            floodFill(x, SCR_HT - y);
        }
    }

    if(button == GLUT_RIGHT_BUTTON && state == GLUT_DOWN)
    {
        // Displaying the polygon :
        glBegin(GL_LINE_LOOP);
            glColor3f(boundarycolor[0], boundarycolor[1], boundarycolor[2]);
            for(int i = 0;i < X.size();i++)
            {
                glVertex2i(X[i], Y[i]);
            }
        glEnd();
        glFlush();

        isFill = true;
    }

}

int main(int argc, char **argv)
{
    glutInit(&argc, argv);
    glutInitWindowPosition(100, 100);
    glutInitWindowSize(640, 480);
    glutInitDisplayMode(GLUT_RGB | GLUT_SINGLE);
    glutCreateWindow("boundary Fill Algorithm");

    glutDisplayFunc(display);

    init();

    glutMouseFunc(mouse);

    glutMainLoop();

    return 0;
}
